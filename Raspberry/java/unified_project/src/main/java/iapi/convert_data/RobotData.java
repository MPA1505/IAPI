/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package iapi.convert_data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RobotData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 6078221443322716787L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RobotData\",\"namespace\":\"iapi\",\"fields\":[{\"name\":\"ID\",\"type\":\"int\"},{\"name\":\"Timestamp\",\"type\":\"double\"},{\"name\":\"ActualJointPositions\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ActualJointVelocities\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ActualJointCurrents\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ActualCartesianCoordinates\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ActualToolSpeed\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"GeneralizedForces\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"TemperatureOfEachJoint\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ExecutionTime\",\"type\":\"double\"},{\"name\":\"SafetyStatus\",\"type\":\"int\"},{\"name\":\"ToolAcceleration\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"NormOfCartesianLinearMomentum\",\"type\":\"double\"},{\"name\":\"RobotCurrent\",\"type\":\"double\"},{\"name\":\"JointVoltages\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ElbowPosition\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ElbowVelocity\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"ToolCurrent\",\"type\":\"double\"},{\"name\":\"ToolTemperature\",\"type\":\"double\"},{\"name\":\"TCPForce\",\"type\":\"double\"},{\"name\":\"AnomalyState\",\"type\":\"int\"}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<RobotData> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<RobotData> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<RobotData> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<RobotData> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<RobotData> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this RobotData to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a RobotData from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a RobotData instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static RobotData fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private int ID;
    private double Timestamp;
    private java.util.List<java.lang.Double> ActualJointPositions;
    private java.util.List<java.lang.Double> ActualJointVelocities;
    private java.util.List<java.lang.Double> ActualJointCurrents;
    private java.util.List<java.lang.Double> ActualCartesianCoordinates;
    private java.util.List<java.lang.Double> ActualToolSpeed;
    private java.util.List<java.lang.Double> GeneralizedForces;
    private java.util.List<java.lang.Double> TemperatureOfEachJoint;
    private double ExecutionTime;
    private int SafetyStatus;
    private java.util.List<java.lang.Double> ToolAcceleration;
    private double NormOfCartesianLinearMomentum;
    private double RobotCurrent;
    private java.util.List<java.lang.Double> JointVoltages;
    private java.util.List<java.lang.Double> ElbowPosition;
    private java.util.List<java.lang.Double> ElbowVelocity;
    private double ToolCurrent;
    private double ToolTemperature;
    private double TCPForce;
    private int AnomalyState;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public RobotData() {}

    /**
     * All-args constructor.
     * @param ID The new value for ID
     * @param Timestamp The new value for Timestamp
     * @param ActualJointPositions The new value for ActualJointPositions
     * @param ActualJointVelocities The new value for ActualJointVelocities
     * @param ActualJointCurrents The new value for ActualJointCurrents
     * @param ActualCartesianCoordinates The new value for ActualCartesianCoordinates
     * @param ActualToolSpeed The new value for ActualToolSpeed
     * @param GeneralizedForces The new value for GeneralizedForces
     * @param TemperatureOfEachJoint The new value for TemperatureOfEachJoint
     * @param ExecutionTime The new value for ExecutionTime
     * @param SafetyStatus The new value for SafetyStatus
     * @param ToolAcceleration The new value for ToolAcceleration
     * @param NormOfCartesianLinearMomentum The new value for NormOfCartesianLinearMomentum
     * @param RobotCurrent The new value for RobotCurrent
     * @param JointVoltages The new value for JointVoltages
     * @param ElbowPosition The new value for ElbowPosition
     * @param ElbowVelocity The new value for ElbowVelocity
     * @param ToolCurrent The new value for ToolCurrent
     * @param ToolTemperature The new value for ToolTemperature
     * @param TCPForce The new value for TCPForce
     * @param AnomalyState The new value for AnomalyState
     */
    public RobotData(java.lang.Integer ID, java.lang.Double Timestamp, java.util.List<java.lang.Double> ActualJointPositions, java.util.List<java.lang.Double> ActualJointVelocities, java.util.List<java.lang.Double> ActualJointCurrents, java.util.List<java.lang.Double> ActualCartesianCoordinates, java.util.List<java.lang.Double> ActualToolSpeed, java.util.List<java.lang.Double> GeneralizedForces, java.util.List<java.lang.Double> TemperatureOfEachJoint, java.lang.Double ExecutionTime, java.lang.Integer SafetyStatus, java.util.List<java.lang.Double> ToolAcceleration, java.lang.Double NormOfCartesianLinearMomentum, java.lang.Double RobotCurrent, java.util.List<java.lang.Double> JointVoltages, java.util.List<java.lang.Double> ElbowPosition, java.util.List<java.lang.Double> ElbowVelocity, java.lang.Double ToolCurrent, java.lang.Double ToolTemperature, java.lang.Double TCPForce, java.lang.Integer AnomalyState) {
        this.ID = ID;
        this.Timestamp = Timestamp;
        this.ActualJointPositions = ActualJointPositions;
        this.ActualJointVelocities = ActualJointVelocities;
        this.ActualJointCurrents = ActualJointCurrents;
        this.ActualCartesianCoordinates = ActualCartesianCoordinates;
        this.ActualToolSpeed = ActualToolSpeed;
        this.GeneralizedForces = GeneralizedForces;
        this.TemperatureOfEachJoint = TemperatureOfEachJoint;
        this.ExecutionTime = ExecutionTime;
        this.SafetyStatus = SafetyStatus;
        this.ToolAcceleration = ToolAcceleration;
        this.NormOfCartesianLinearMomentum = NormOfCartesianLinearMomentum;
        this.RobotCurrent = RobotCurrent;
        this.JointVoltages = JointVoltages;
        this.ElbowPosition = ElbowPosition;
        this.ElbowVelocity = ElbowVelocity;
        this.ToolCurrent = ToolCurrent;
        this.ToolTemperature = ToolTemperature;
        this.TCPForce = TCPForce;
        this.AnomalyState = AnomalyState;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

    @Override
    public org.apache.avro.Schema getSchema() { return SCHEMA$; }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return ID;
            case 1: return Timestamp;
            case 2: return ActualJointPositions;
            case 3: return ActualJointVelocities;
            case 4: return ActualJointCurrents;
            case 5: return ActualCartesianCoordinates;
            case 6: return ActualToolSpeed;
            case 7: return GeneralizedForces;
            case 8: return TemperatureOfEachJoint;
            case 9: return ExecutionTime;
            case 10: return SafetyStatus;
            case 11: return ToolAcceleration;
            case 12: return NormOfCartesianLinearMomentum;
            case 13: return RobotCurrent;
            case 14: return JointVoltages;
            case 15: return ElbowPosition;
            case 16: return ElbowVelocity;
            case 17: return ToolCurrent;
            case 18: return ToolTemperature;
            case 19: return TCPForce;
            case 20: return AnomalyState;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: ID = (java.lang.Integer)value$; break;
            case 1: Timestamp = (java.lang.Double)value$; break;
            case 2: ActualJointPositions = (java.util.List<java.lang.Double>)value$; break;
            case 3: ActualJointVelocities = (java.util.List<java.lang.Double>)value$; break;
            case 4: ActualJointCurrents = (java.util.List<java.lang.Double>)value$; break;
            case 5: ActualCartesianCoordinates = (java.util.List<java.lang.Double>)value$; break;
            case 6: ActualToolSpeed = (java.util.List<java.lang.Double>)value$; break;
            case 7: GeneralizedForces = (java.util.List<java.lang.Double>)value$; break;
            case 8: TemperatureOfEachJoint = (java.util.List<java.lang.Double>)value$; break;
            case 9: ExecutionTime = (java.lang.Double)value$; break;
            case 10: SafetyStatus = (java.lang.Integer)value$; break;
            case 11: ToolAcceleration = (java.util.List<java.lang.Double>)value$; break;
            case 12: NormOfCartesianLinearMomentum = (java.lang.Double)value$; break;
            case 13: RobotCurrent = (java.lang.Double)value$; break;
            case 14: JointVoltages = (java.util.List<java.lang.Double>)value$; break;
            case 15: ElbowPosition = (java.util.List<java.lang.Double>)value$; break;
            case 16: ElbowVelocity = (java.util.List<java.lang.Double>)value$; break;
            case 17: ToolCurrent = (java.lang.Double)value$; break;
            case 18: ToolTemperature = (java.lang.Double)value$; break;
            case 19: TCPForce = (java.lang.Double)value$; break;
            case 20: AnomalyState = (java.lang.Integer)value$; break;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'ID' field.
     * @return The value of the 'ID' field.
     */
    public int getID() {
        return ID;
    }


    /**
     * Sets the value of the 'ID' field.
     * @param value the value to set.
     */
    public void setID(int value) {
        this.ID = value;
    }

    /**
     * Gets the value of the 'Timestamp' field.
     * @return The value of the 'Timestamp' field.
     */
    public double getTimestamp() {
        return Timestamp;
    }


    /**
     * Sets the value of the 'Timestamp' field.
     * @param value the value to set.
     */
    public void setTimestamp(double value) {
        this.Timestamp = value;
    }

    /**
     * Gets the value of the 'ActualJointPositions' field.
     * @return The value of the 'ActualJointPositions' field.
     */
    public java.util.List<java.lang.Double> getActualJointPositions() {
        return ActualJointPositions;
    }


    /**
     * Sets the value of the 'ActualJointPositions' field.
     * @param value the value to set.
     */
    public void setActualJointPositions(java.util.List<java.lang.Double> value) {
        this.ActualJointPositions = value;
    }

    /**
     * Gets the value of the 'ActualJointVelocities' field.
     * @return The value of the 'ActualJointVelocities' field.
     */
    public java.util.List<java.lang.Double> getActualJointVelocities() {
        return ActualJointVelocities;
    }


    /**
     * Sets the value of the 'ActualJointVelocities' field.
     * @param value the value to set.
     */
    public void setActualJointVelocities(java.util.List<java.lang.Double> value) {
        this.ActualJointVelocities = value;
    }

    /**
     * Gets the value of the 'ActualJointCurrents' field.
     * @return The value of the 'ActualJointCurrents' field.
     */
    public java.util.List<java.lang.Double> getActualJointCurrents() {
        return ActualJointCurrents;
    }


    /**
     * Sets the value of the 'ActualJointCurrents' field.
     * @param value the value to set.
     */
    public void setActualJointCurrents(java.util.List<java.lang.Double> value) {
        this.ActualJointCurrents = value;
    }

    /**
     * Gets the value of the 'ActualCartesianCoordinates' field.
     * @return The value of the 'ActualCartesianCoordinates' field.
     */
    public java.util.List<java.lang.Double> getActualCartesianCoordinates() {
        return ActualCartesianCoordinates;
    }


    /**
     * Sets the value of the 'ActualCartesianCoordinates' field.
     * @param value the value to set.
     */
    public void setActualCartesianCoordinates(java.util.List<java.lang.Double> value) {
        this.ActualCartesianCoordinates = value;
    }

    /**
     * Gets the value of the 'ActualToolSpeed' field.
     * @return The value of the 'ActualToolSpeed' field.
     */
    public java.util.List<java.lang.Double> getActualToolSpeed() {
        return ActualToolSpeed;
    }


    /**
     * Sets the value of the 'ActualToolSpeed' field.
     * @param value the value to set.
     */
    public void setActualToolSpeed(java.util.List<java.lang.Double> value) {
        this.ActualToolSpeed = value;
    }

    /**
     * Gets the value of the 'GeneralizedForces' field.
     * @return The value of the 'GeneralizedForces' field.
     */
    public java.util.List<java.lang.Double> getGeneralizedForces() {
        return GeneralizedForces;
    }


    /**
     * Sets the value of the 'GeneralizedForces' field.
     * @param value the value to set.
     */
    public void setGeneralizedForces(java.util.List<java.lang.Double> value) {
        this.GeneralizedForces = value;
    }

    /**
     * Gets the value of the 'TemperatureOfEachJoint' field.
     * @return The value of the 'TemperatureOfEachJoint' field.
     */
    public java.util.List<java.lang.Double> getTemperatureOfEachJoint() {
        return TemperatureOfEachJoint;
    }


    /**
     * Sets the value of the 'TemperatureOfEachJoint' field.
     * @param value the value to set.
     */
    public void setTemperatureOfEachJoint(java.util.List<java.lang.Double> value) {
        this.TemperatureOfEachJoint = value;
    }

    /**
     * Gets the value of the 'ExecutionTime' field.
     * @return The value of the 'ExecutionTime' field.
     */
    public double getExecutionTime() {
        return ExecutionTime;
    }


    /**
     * Sets the value of the 'ExecutionTime' field.
     * @param value the value to set.
     */
    public void setExecutionTime(double value) {
        this.ExecutionTime = value;
    }

    /**
     * Gets the value of the 'SafetyStatus' field.
     * @return The value of the 'SafetyStatus' field.
     */
    public int getSafetyStatus() {
        return SafetyStatus;
    }


    /**
     * Sets the value of the 'SafetyStatus' field.
     * @param value the value to set.
     */
    public void setSafetyStatus(int value) {
        this.SafetyStatus = value;
    }

    /**
     * Gets the value of the 'ToolAcceleration' field.
     * @return The value of the 'ToolAcceleration' field.
     */
    public java.util.List<java.lang.Double> getToolAcceleration() {
        return ToolAcceleration;
    }


    /**
     * Sets the value of the 'ToolAcceleration' field.
     * @param value the value to set.
     */
    public void setToolAcceleration(java.util.List<java.lang.Double> value) {
        this.ToolAcceleration = value;
    }

    /**
     * Gets the value of the 'NormOfCartesianLinearMomentum' field.
     * @return The value of the 'NormOfCartesianLinearMomentum' field.
     */
    public double getNormOfCartesianLinearMomentum() {
        return NormOfCartesianLinearMomentum;
    }


    /**
     * Sets the value of the 'NormOfCartesianLinearMomentum' field.
     * @param value the value to set.
     */
    public void setNormOfCartesianLinearMomentum(double value) {
        this.NormOfCartesianLinearMomentum = value;
    }

    /**
     * Gets the value of the 'RobotCurrent' field.
     * @return The value of the 'RobotCurrent' field.
     */
    public double getRobotCurrent() {
        return RobotCurrent;
    }


    /**
     * Sets the value of the 'RobotCurrent' field.
     * @param value the value to set.
     */
    public void setRobotCurrent(double value) {
        this.RobotCurrent = value;
    }

    /**
     * Gets the value of the 'JointVoltages' field.
     * @return The value of the 'JointVoltages' field.
     */
    public java.util.List<java.lang.Double> getJointVoltages() {
        return JointVoltages;
    }


    /**
     * Sets the value of the 'JointVoltages' field.
     * @param value the value to set.
     */
    public void setJointVoltages(java.util.List<java.lang.Double> value) {
        this.JointVoltages = value;
    }

    /**
     * Gets the value of the 'ElbowPosition' field.
     * @return The value of the 'ElbowPosition' field.
     */
    public java.util.List<java.lang.Double> getElbowPosition() {
        return ElbowPosition;
    }


    /**
     * Sets the value of the 'ElbowPosition' field.
     * @param value the value to set.
     */
    public void setElbowPosition(java.util.List<java.lang.Double> value) {
        this.ElbowPosition = value;
    }

    /**
     * Gets the value of the 'ElbowVelocity' field.
     * @return The value of the 'ElbowVelocity' field.
     */
    public java.util.List<java.lang.Double> getElbowVelocity() {
        return ElbowVelocity;
    }


    /**
     * Sets the value of the 'ElbowVelocity' field.
     * @param value the value to set.
     */
    public void setElbowVelocity(java.util.List<java.lang.Double> value) {
        this.ElbowVelocity = value;
    }

    /**
     * Gets the value of the 'ToolCurrent' field.
     * @return The value of the 'ToolCurrent' field.
     */
    public double getToolCurrent() {
        return ToolCurrent;
    }


    /**
     * Sets the value of the 'ToolCurrent' field.
     * @param value the value to set.
     */
    public void setToolCurrent(double value) {
        this.ToolCurrent = value;
    }

    /**
     * Gets the value of the 'ToolTemperature' field.
     * @return The value of the 'ToolTemperature' field.
     */
    public double getToolTemperature() {
        return ToolTemperature;
    }


    /**
     * Sets the value of the 'ToolTemperature' field.
     * @param value the value to set.
     */
    public void setToolTemperature(double value) {
        this.ToolTemperature = value;
    }

    /**
     * Gets the value of the 'TCPForce' field.
     * @return The value of the 'TCPForce' field.
     */
    public double getTCPForce() {
        return TCPForce;
    }


    /**
     * Sets the value of the 'TCPForce' field.
     * @param value the value to set.
     */
    public void setTCPForce(double value) {
        this.TCPForce = value;
    }

    /**
     * Gets the value of the 'AnomalyState' field.
     * @return The value of the 'AnomalyState' field.
     */
    public int getAnomalyState() {
        return AnomalyState;
    }


    /**
     * Sets the value of the 'AnomalyState' field.
     * @param value the value to set.
     */
    public void setAnomalyState(int value) {
        this.AnomalyState = value;
    }

    /**
     * Creates a new RobotData RecordBuilder.
     * @return A new RobotData RecordBuilder
     */
    public static RobotData.Builder newBuilder() {
        return new RobotData.Builder();
    }

    /**
     * Creates a new RobotData RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new RobotData RecordBuilder
     */
    public static RobotData.Builder newBuilder(RobotData.Builder other) {
        if (other == null) {
            return new RobotData.Builder();
        } else {
            return new RobotData.Builder(other);
        }
    }

    /**
     * Creates a new RobotData RecordBuilder by copying an existing RobotData instance.
     * @param other The existing instance to copy.
     * @return A new RobotData RecordBuilder
     */
    public static RobotData.Builder newBuilder(RobotData other) {
        if (other == null) {
            return new RobotData.Builder();
        } else {
            return new RobotData.Builder(other);
        }
    }

    /**
     * RecordBuilder for RobotData instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RobotData>
            implements org.apache.avro.data.RecordBuilder<RobotData> {

        private int ID;
        private double Timestamp;
        private java.util.List<java.lang.Double> ActualJointPositions;
        private java.util.List<java.lang.Double> ActualJointVelocities;
        private java.util.List<java.lang.Double> ActualJointCurrents;
        private java.util.List<java.lang.Double> ActualCartesianCoordinates;
        private java.util.List<java.lang.Double> ActualToolSpeed;
        private java.util.List<java.lang.Double> GeneralizedForces;
        private java.util.List<java.lang.Double> TemperatureOfEachJoint;
        private double ExecutionTime;
        private int SafetyStatus;
        private java.util.List<java.lang.Double> ToolAcceleration;
        private double NormOfCartesianLinearMomentum;
        private double RobotCurrent;
        private java.util.List<java.lang.Double> JointVoltages;
        private java.util.List<java.lang.Double> ElbowPosition;
        private java.util.List<java.lang.Double> ElbowVelocity;
        private double ToolCurrent;
        private double ToolTemperature;
        private double TCPForce;
        private int AnomalyState;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(RobotData.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.ID)) {
                this.ID = data().deepCopy(fields()[0].schema(), other.ID);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.Timestamp)) {
                this.Timestamp = data().deepCopy(fields()[1].schema(), other.Timestamp);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.ActualJointPositions)) {
                this.ActualJointPositions = data().deepCopy(fields()[2].schema(), other.ActualJointPositions);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.ActualJointVelocities)) {
                this.ActualJointVelocities = data().deepCopy(fields()[3].schema(), other.ActualJointVelocities);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.ActualJointCurrents)) {
                this.ActualJointCurrents = data().deepCopy(fields()[4].schema(), other.ActualJointCurrents);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.ActualCartesianCoordinates)) {
                this.ActualCartesianCoordinates = data().deepCopy(fields()[5].schema(), other.ActualCartesianCoordinates);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.ActualToolSpeed)) {
                this.ActualToolSpeed = data().deepCopy(fields()[6].schema(), other.ActualToolSpeed);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.GeneralizedForces)) {
                this.GeneralizedForces = data().deepCopy(fields()[7].schema(), other.GeneralizedForces);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.TemperatureOfEachJoint)) {
                this.TemperatureOfEachJoint = data().deepCopy(fields()[8].schema(), other.TemperatureOfEachJoint);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.ExecutionTime)) {
                this.ExecutionTime = data().deepCopy(fields()[9].schema(), other.ExecutionTime);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.SafetyStatus)) {
                this.SafetyStatus = data().deepCopy(fields()[10].schema(), other.SafetyStatus);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.ToolAcceleration)) {
                this.ToolAcceleration = data().deepCopy(fields()[11].schema(), other.ToolAcceleration);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.NormOfCartesianLinearMomentum)) {
                this.NormOfCartesianLinearMomentum = data().deepCopy(fields()[12].schema(), other.NormOfCartesianLinearMomentum);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.RobotCurrent)) {
                this.RobotCurrent = data().deepCopy(fields()[13].schema(), other.RobotCurrent);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.JointVoltages)) {
                this.JointVoltages = data().deepCopy(fields()[14].schema(), other.JointVoltages);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
            if (isValidValue(fields()[15], other.ElbowPosition)) {
                this.ElbowPosition = data().deepCopy(fields()[15].schema(), other.ElbowPosition);
                fieldSetFlags()[15] = other.fieldSetFlags()[15];
            }
            if (isValidValue(fields()[16], other.ElbowVelocity)) {
                this.ElbowVelocity = data().deepCopy(fields()[16].schema(), other.ElbowVelocity);
                fieldSetFlags()[16] = other.fieldSetFlags()[16];
            }
            if (isValidValue(fields()[17], other.ToolCurrent)) {
                this.ToolCurrent = data().deepCopy(fields()[17].schema(), other.ToolCurrent);
                fieldSetFlags()[17] = other.fieldSetFlags()[17];
            }
            if (isValidValue(fields()[18], other.ToolTemperature)) {
                this.ToolTemperature = data().deepCopy(fields()[18].schema(), other.ToolTemperature);
                fieldSetFlags()[18] = other.fieldSetFlags()[18];
            }
            if (isValidValue(fields()[19], other.TCPForce)) {
                this.TCPForce = data().deepCopy(fields()[19].schema(), other.TCPForce);
                fieldSetFlags()[19] = other.fieldSetFlags()[19];
            }
            if (isValidValue(fields()[20], other.AnomalyState)) {
                this.AnomalyState = data().deepCopy(fields()[20].schema(), other.AnomalyState);
                fieldSetFlags()[20] = other.fieldSetFlags()[20];
            }
        }

        /**
         * Creates a Builder by copying an existing RobotData instance
         * @param other The existing instance to copy.
         */
        private Builder(RobotData other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.ID)) {
                this.ID = data().deepCopy(fields()[0].schema(), other.ID);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.Timestamp)) {
                this.Timestamp = data().deepCopy(fields()[1].schema(), other.Timestamp);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.ActualJointPositions)) {
                this.ActualJointPositions = data().deepCopy(fields()[2].schema(), other.ActualJointPositions);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.ActualJointVelocities)) {
                this.ActualJointVelocities = data().deepCopy(fields()[3].schema(), other.ActualJointVelocities);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.ActualJointCurrents)) {
                this.ActualJointCurrents = data().deepCopy(fields()[4].schema(), other.ActualJointCurrents);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.ActualCartesianCoordinates)) {
                this.ActualCartesianCoordinates = data().deepCopy(fields()[5].schema(), other.ActualCartesianCoordinates);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.ActualToolSpeed)) {
                this.ActualToolSpeed = data().deepCopy(fields()[6].schema(), other.ActualToolSpeed);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.GeneralizedForces)) {
                this.GeneralizedForces = data().deepCopy(fields()[7].schema(), other.GeneralizedForces);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.TemperatureOfEachJoint)) {
                this.TemperatureOfEachJoint = data().deepCopy(fields()[8].schema(), other.TemperatureOfEachJoint);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.ExecutionTime)) {
                this.ExecutionTime = data().deepCopy(fields()[9].schema(), other.ExecutionTime);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.SafetyStatus)) {
                this.SafetyStatus = data().deepCopy(fields()[10].schema(), other.SafetyStatus);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.ToolAcceleration)) {
                this.ToolAcceleration = data().deepCopy(fields()[11].schema(), other.ToolAcceleration);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.NormOfCartesianLinearMomentum)) {
                this.NormOfCartesianLinearMomentum = data().deepCopy(fields()[12].schema(), other.NormOfCartesianLinearMomentum);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.RobotCurrent)) {
                this.RobotCurrent = data().deepCopy(fields()[13].schema(), other.RobotCurrent);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.JointVoltages)) {
                this.JointVoltages = data().deepCopy(fields()[14].schema(), other.JointVoltages);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.ElbowPosition)) {
                this.ElbowPosition = data().deepCopy(fields()[15].schema(), other.ElbowPosition);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.ElbowVelocity)) {
                this.ElbowVelocity = data().deepCopy(fields()[16].schema(), other.ElbowVelocity);
                fieldSetFlags()[16] = true;
            }
            if (isValidValue(fields()[17], other.ToolCurrent)) {
                this.ToolCurrent = data().deepCopy(fields()[17].schema(), other.ToolCurrent);
                fieldSetFlags()[17] = true;
            }
            if (isValidValue(fields()[18], other.ToolTemperature)) {
                this.ToolTemperature = data().deepCopy(fields()[18].schema(), other.ToolTemperature);
                fieldSetFlags()[18] = true;
            }
            if (isValidValue(fields()[19], other.TCPForce)) {
                this.TCPForce = data().deepCopy(fields()[19].schema(), other.TCPForce);
                fieldSetFlags()[19] = true;
            }
            if (isValidValue(fields()[20], other.AnomalyState)) {
                this.AnomalyState = data().deepCopy(fields()[20].schema(), other.AnomalyState);
                fieldSetFlags()[20] = true;
            }
        }

        /**
         * Gets the value of the 'ID' field.
         * @return The value.
         */
        public int getID() {
            return ID;
        }


        /**
         * Sets the value of the 'ID' field.
         * @param value The value of 'ID'.
         * @return This builder.
         */
        public RobotData.Builder setID(int value) {
            validate(fields()[0], value);
            this.ID = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'ID' field has been set.
         * @return True if the 'ID' field has been set, false otherwise.
         */
        public boolean hasID() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'ID' field.
         * @return This builder.
         */
        public RobotData.Builder clearID() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'Timestamp' field.
         * @return The value.
         */
        public double getTimestamp() {
            return Timestamp;
        }


        /**
         * Sets the value of the 'Timestamp' field.
         * @param value The value of 'Timestamp'.
         * @return This builder.
         */
        public RobotData.Builder setTimestamp(double value) {
            validate(fields()[1], value);
            this.Timestamp = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'Timestamp' field has been set.
         * @return True if the 'Timestamp' field has been set, false otherwise.
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'Timestamp' field.
         * @return This builder.
         */
        public RobotData.Builder clearTimestamp() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'ActualJointPositions' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getActualJointPositions() {
            return ActualJointPositions;
        }


        /**
         * Sets the value of the 'ActualJointPositions' field.
         * @param value The value of 'ActualJointPositions'.
         * @return This builder.
         */
        public RobotData.Builder setActualJointPositions(java.util.List<java.lang.Double> value) {
            validate(fields()[2], value);
            this.ActualJointPositions = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'ActualJointPositions' field has been set.
         * @return True if the 'ActualJointPositions' field has been set, false otherwise.
         */
        public boolean hasActualJointPositions() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'ActualJointPositions' field.
         * @return This builder.
         */
        public RobotData.Builder clearActualJointPositions() {
            ActualJointPositions = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'ActualJointVelocities' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getActualJointVelocities() {
            return ActualJointVelocities;
        }


        /**
         * Sets the value of the 'ActualJointVelocities' field.
         * @param value The value of 'ActualJointVelocities'.
         * @return This builder.
         */
        public RobotData.Builder setActualJointVelocities(java.util.List<java.lang.Double> value) {
            validate(fields()[3], value);
            this.ActualJointVelocities = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'ActualJointVelocities' field has been set.
         * @return True if the 'ActualJointVelocities' field has been set, false otherwise.
         */
        public boolean hasActualJointVelocities() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'ActualJointVelocities' field.
         * @return This builder.
         */
        public RobotData.Builder clearActualJointVelocities() {
            ActualJointVelocities = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'ActualJointCurrents' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getActualJointCurrents() {
            return ActualJointCurrents;
        }


        /**
         * Sets the value of the 'ActualJointCurrents' field.
         * @param value The value of 'ActualJointCurrents'.
         * @return This builder.
         */
        public RobotData.Builder setActualJointCurrents(java.util.List<java.lang.Double> value) {
            validate(fields()[4], value);
            this.ActualJointCurrents = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'ActualJointCurrents' field has been set.
         * @return True if the 'ActualJointCurrents' field has been set, false otherwise.
         */
        public boolean hasActualJointCurrents() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'ActualJointCurrents' field.
         * @return This builder.
         */
        public RobotData.Builder clearActualJointCurrents() {
            ActualJointCurrents = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'ActualCartesianCoordinates' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getActualCartesianCoordinates() {
            return ActualCartesianCoordinates;
        }


        /**
         * Sets the value of the 'ActualCartesianCoordinates' field.
         * @param value The value of 'ActualCartesianCoordinates'.
         * @return This builder.
         */
        public RobotData.Builder setActualCartesianCoordinates(java.util.List<java.lang.Double> value) {
            validate(fields()[5], value);
            this.ActualCartesianCoordinates = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'ActualCartesianCoordinates' field has been set.
         * @return True if the 'ActualCartesianCoordinates' field has been set, false otherwise.
         */
        public boolean hasActualCartesianCoordinates() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'ActualCartesianCoordinates' field.
         * @return This builder.
         */
        public RobotData.Builder clearActualCartesianCoordinates() {
            ActualCartesianCoordinates = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'ActualToolSpeed' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getActualToolSpeed() {
            return ActualToolSpeed;
        }


        /**
         * Sets the value of the 'ActualToolSpeed' field.
         * @param value The value of 'ActualToolSpeed'.
         * @return This builder.
         */
        public RobotData.Builder setActualToolSpeed(java.util.List<java.lang.Double> value) {
            validate(fields()[6], value);
            this.ActualToolSpeed = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'ActualToolSpeed' field has been set.
         * @return True if the 'ActualToolSpeed' field has been set, false otherwise.
         */
        public boolean hasActualToolSpeed() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'ActualToolSpeed' field.
         * @return This builder.
         */
        public RobotData.Builder clearActualToolSpeed() {
            ActualToolSpeed = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'GeneralizedForces' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getGeneralizedForces() {
            return GeneralizedForces;
        }


        /**
         * Sets the value of the 'GeneralizedForces' field.
         * @param value The value of 'GeneralizedForces'.
         * @return This builder.
         */
        public RobotData.Builder setGeneralizedForces(java.util.List<java.lang.Double> value) {
            validate(fields()[7], value);
            this.GeneralizedForces = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'GeneralizedForces' field has been set.
         * @return True if the 'GeneralizedForces' field has been set, false otherwise.
         */
        public boolean hasGeneralizedForces() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'GeneralizedForces' field.
         * @return This builder.
         */
        public RobotData.Builder clearGeneralizedForces() {
            GeneralizedForces = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'TemperatureOfEachJoint' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getTemperatureOfEachJoint() {
            return TemperatureOfEachJoint;
        }


        /**
         * Sets the value of the 'TemperatureOfEachJoint' field.
         * @param value The value of 'TemperatureOfEachJoint'.
         * @return This builder.
         */
        public RobotData.Builder setTemperatureOfEachJoint(java.util.List<java.lang.Double> value) {
            validate(fields()[8], value);
            this.TemperatureOfEachJoint = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'TemperatureOfEachJoint' field has been set.
         * @return True if the 'TemperatureOfEachJoint' field has been set, false otherwise.
         */
        public boolean hasTemperatureOfEachJoint() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'TemperatureOfEachJoint' field.
         * @return This builder.
         */
        public RobotData.Builder clearTemperatureOfEachJoint() {
            TemperatureOfEachJoint = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'ExecutionTime' field.
         * @return The value.
         */
        public double getExecutionTime() {
            return ExecutionTime;
        }


        /**
         * Sets the value of the 'ExecutionTime' field.
         * @param value The value of 'ExecutionTime'.
         * @return This builder.
         */
        public RobotData.Builder setExecutionTime(double value) {
            validate(fields()[9], value);
            this.ExecutionTime = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'ExecutionTime' field has been set.
         * @return True if the 'ExecutionTime' field has been set, false otherwise.
         */
        public boolean hasExecutionTime() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'ExecutionTime' field.
         * @return This builder.
         */
        public RobotData.Builder clearExecutionTime() {
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'SafetyStatus' field.
         * @return The value.
         */
        public int getSafetyStatus() {
            return SafetyStatus;
        }


        /**
         * Sets the value of the 'SafetyStatus' field.
         * @param value The value of 'SafetyStatus'.
         * @return This builder.
         */
        public RobotData.Builder setSafetyStatus(int value) {
            validate(fields()[10], value);
            this.SafetyStatus = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'SafetyStatus' field has been set.
         * @return True if the 'SafetyStatus' field has been set, false otherwise.
         */
        public boolean hasSafetyStatus() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'SafetyStatus' field.
         * @return This builder.
         */
        public RobotData.Builder clearSafetyStatus() {
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'ToolAcceleration' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getToolAcceleration() {
            return ToolAcceleration;
        }


        /**
         * Sets the value of the 'ToolAcceleration' field.
         * @param value The value of 'ToolAcceleration'.
         * @return This builder.
         */
        public RobotData.Builder setToolAcceleration(java.util.List<java.lang.Double> value) {
            validate(fields()[11], value);
            this.ToolAcceleration = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'ToolAcceleration' field has been set.
         * @return True if the 'ToolAcceleration' field has been set, false otherwise.
         */
        public boolean hasToolAcceleration() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'ToolAcceleration' field.
         * @return This builder.
         */
        public RobotData.Builder clearToolAcceleration() {
            ToolAcceleration = null;
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'NormOfCartesianLinearMomentum' field.
         * @return The value.
         */
        public double getNormOfCartesianLinearMomentum() {
            return NormOfCartesianLinearMomentum;
        }


        /**
         * Sets the value of the 'NormOfCartesianLinearMomentum' field.
         * @param value The value of 'NormOfCartesianLinearMomentum'.
         * @return This builder.
         */
        public RobotData.Builder setNormOfCartesianLinearMomentum(double value) {
            validate(fields()[12], value);
            this.NormOfCartesianLinearMomentum = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'NormOfCartesianLinearMomentum' field has been set.
         * @return True if the 'NormOfCartesianLinearMomentum' field has been set, false otherwise.
         */
        public boolean hasNormOfCartesianLinearMomentum() {
            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'NormOfCartesianLinearMomentum' field.
         * @return This builder.
         */
        public RobotData.Builder clearNormOfCartesianLinearMomentum() {
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'RobotCurrent' field.
         * @return The value.
         */
        public double getRobotCurrent() {
            return RobotCurrent;
        }


        /**
         * Sets the value of the 'RobotCurrent' field.
         * @param value The value of 'RobotCurrent'.
         * @return This builder.
         */
        public RobotData.Builder setRobotCurrent(double value) {
            validate(fields()[13], value);
            this.RobotCurrent = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'RobotCurrent' field has been set.
         * @return True if the 'RobotCurrent' field has been set, false otherwise.
         */
        public boolean hasRobotCurrent() {
            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'RobotCurrent' field.
         * @return This builder.
         */
        public RobotData.Builder clearRobotCurrent() {
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'JointVoltages' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getJointVoltages() {
            return JointVoltages;
        }


        /**
         * Sets the value of the 'JointVoltages' field.
         * @param value The value of 'JointVoltages'.
         * @return This builder.
         */
        public RobotData.Builder setJointVoltages(java.util.List<java.lang.Double> value) {
            validate(fields()[14], value);
            this.JointVoltages = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'JointVoltages' field has been set.
         * @return True if the 'JointVoltages' field has been set, false otherwise.
         */
        public boolean hasJointVoltages() {
            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'JointVoltages' field.
         * @return This builder.
         */
        public RobotData.Builder clearJointVoltages() {
            JointVoltages = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'ElbowPosition' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getElbowPosition() {
            return ElbowPosition;
        }


        /**
         * Sets the value of the 'ElbowPosition' field.
         * @param value The value of 'ElbowPosition'.
         * @return This builder.
         */
        public RobotData.Builder setElbowPosition(java.util.List<java.lang.Double> value) {
            validate(fields()[15], value);
            this.ElbowPosition = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'ElbowPosition' field has been set.
         * @return True if the 'ElbowPosition' field has been set, false otherwise.
         */
        public boolean hasElbowPosition() {
            return fieldSetFlags()[15];
        }


        /**
         * Clears the value of the 'ElbowPosition' field.
         * @return This builder.
         */
        public RobotData.Builder clearElbowPosition() {
            ElbowPosition = null;
            fieldSetFlags()[15] = false;
            return this;
        }

        /**
         * Gets the value of the 'ElbowVelocity' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getElbowVelocity() {
            return ElbowVelocity;
        }


        /**
         * Sets the value of the 'ElbowVelocity' field.
         * @param value The value of 'ElbowVelocity'.
         * @return This builder.
         */
        public RobotData.Builder setElbowVelocity(java.util.List<java.lang.Double> value) {
            validate(fields()[16], value);
            this.ElbowVelocity = value;
            fieldSetFlags()[16] = true;
            return this;
        }

        /**
         * Checks whether the 'ElbowVelocity' field has been set.
         * @return True if the 'ElbowVelocity' field has been set, false otherwise.
         */
        public boolean hasElbowVelocity() {
            return fieldSetFlags()[16];
        }


        /**
         * Clears the value of the 'ElbowVelocity' field.
         * @return This builder.
         */
        public RobotData.Builder clearElbowVelocity() {
            ElbowVelocity = null;
            fieldSetFlags()[16] = false;
            return this;
        }

        /**
         * Gets the value of the 'ToolCurrent' field.
         * @return The value.
         */
        public double getToolCurrent() {
            return ToolCurrent;
        }


        /**
         * Sets the value of the 'ToolCurrent' field.
         * @param value The value of 'ToolCurrent'.
         * @return This builder.
         */
        public RobotData.Builder setToolCurrent(double value) {
            validate(fields()[17], value);
            this.ToolCurrent = value;
            fieldSetFlags()[17] = true;
            return this;
        }

        /**
         * Checks whether the 'ToolCurrent' field has been set.
         * @return True if the 'ToolCurrent' field has been set, false otherwise.
         */
        public boolean hasToolCurrent() {
            return fieldSetFlags()[17];
        }


        /**
         * Clears the value of the 'ToolCurrent' field.
         * @return This builder.
         */
        public RobotData.Builder clearToolCurrent() {
            fieldSetFlags()[17] = false;
            return this;
        }

        /**
         * Gets the value of the 'ToolTemperature' field.
         * @return The value.
         */
        public double getToolTemperature() {
            return ToolTemperature;
        }


        /**
         * Sets the value of the 'ToolTemperature' field.
         * @param value The value of 'ToolTemperature'.
         * @return This builder.
         */
        public RobotData.Builder setToolTemperature(double value) {
            validate(fields()[18], value);
            this.ToolTemperature = value;
            fieldSetFlags()[18] = true;
            return this;
        }

        /**
         * Checks whether the 'ToolTemperature' field has been set.
         * @return True if the 'ToolTemperature' field has been set, false otherwise.
         */
        public boolean hasToolTemperature() {
            return fieldSetFlags()[18];
        }


        /**
         * Clears the value of the 'ToolTemperature' field.
         * @return This builder.
         */
        public RobotData.Builder clearToolTemperature() {
            fieldSetFlags()[18] = false;
            return this;
        }

        /**
         * Gets the value of the 'TCPForce' field.
         * @return The value.
         */
        public double getTCPForce() {
            return TCPForce;
        }


        /**
         * Sets the value of the 'TCPForce' field.
         * @param value The value of 'TCPForce'.
         * @return This builder.
         */
        public RobotData.Builder setTCPForce(double value) {
            validate(fields()[19], value);
            this.TCPForce = value;
            fieldSetFlags()[19] = true;
            return this;
        }

        /**
         * Checks whether the 'TCPForce' field has been set.
         * @return True if the 'TCPForce' field has been set, false otherwise.
         */
        public boolean hasTCPForce() {
            return fieldSetFlags()[19];
        }


        /**
         * Clears the value of the 'TCPForce' field.
         * @return This builder.
         */
        public RobotData.Builder clearTCPForce() {
            fieldSetFlags()[19] = false;
            return this;
        }

        /**
         * Gets the value of the 'AnomalyState' field.
         * @return The value.
         */
        public int getAnomalyState() {
            return AnomalyState;
        }


        /**
         * Sets the value of the 'AnomalyState' field.
         * @param value The value of 'AnomalyState'.
         * @return This builder.
         */
        public RobotData.Builder setAnomalyState(int value) {
            validate(fields()[20], value);
            this.AnomalyState = value;
            fieldSetFlags()[20] = true;
            return this;
        }

        /**
         * Checks whether the 'AnomalyState' field has been set.
         * @return True if the 'AnomalyState' field has been set, false otherwise.
         */
        public boolean hasAnomalyState() {
            return fieldSetFlags()[20];
        }


        /**
         * Clears the value of the 'AnomalyState' field.
         * @return This builder.
         */
        public RobotData.Builder clearAnomalyState() {
            fieldSetFlags()[20] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public RobotData build() {
            try {
                RobotData record = new RobotData();
                record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.Integer) defaultValue(fields()[0]);
                record.Timestamp = fieldSetFlags()[1] ? this.Timestamp : (java.lang.Double) defaultValue(fields()[1]);
                record.ActualJointPositions = fieldSetFlags()[2] ? this.ActualJointPositions : (java.util.List<java.lang.Double>) defaultValue(fields()[2]);
                record.ActualJointVelocities = fieldSetFlags()[3] ? this.ActualJointVelocities : (java.util.List<java.lang.Double>) defaultValue(fields()[3]);
                record.ActualJointCurrents = fieldSetFlags()[4] ? this.ActualJointCurrents : (java.util.List<java.lang.Double>) defaultValue(fields()[4]);
                record.ActualCartesianCoordinates = fieldSetFlags()[5] ? this.ActualCartesianCoordinates : (java.util.List<java.lang.Double>) defaultValue(fields()[5]);
                record.ActualToolSpeed = fieldSetFlags()[6] ? this.ActualToolSpeed : (java.util.List<java.lang.Double>) defaultValue(fields()[6]);
                record.GeneralizedForces = fieldSetFlags()[7] ? this.GeneralizedForces : (java.util.List<java.lang.Double>) defaultValue(fields()[7]);
                record.TemperatureOfEachJoint = fieldSetFlags()[8] ? this.TemperatureOfEachJoint : (java.util.List<java.lang.Double>) defaultValue(fields()[8]);
                record.ExecutionTime = fieldSetFlags()[9] ? this.ExecutionTime : (java.lang.Double) defaultValue(fields()[9]);
                record.SafetyStatus = fieldSetFlags()[10] ? this.SafetyStatus : (java.lang.Integer) defaultValue(fields()[10]);
                record.ToolAcceleration = fieldSetFlags()[11] ? this.ToolAcceleration : (java.util.List<java.lang.Double>) defaultValue(fields()[11]);
                record.NormOfCartesianLinearMomentum = fieldSetFlags()[12] ? this.NormOfCartesianLinearMomentum : (java.lang.Double) defaultValue(fields()[12]);
                record.RobotCurrent = fieldSetFlags()[13] ? this.RobotCurrent : (java.lang.Double) defaultValue(fields()[13]);
                record.JointVoltages = fieldSetFlags()[14] ? this.JointVoltages : (java.util.List<java.lang.Double>) defaultValue(fields()[14]);
                record.ElbowPosition = fieldSetFlags()[15] ? this.ElbowPosition : (java.util.List<java.lang.Double>) defaultValue(fields()[15]);
                record.ElbowVelocity = fieldSetFlags()[16] ? this.ElbowVelocity : (java.util.List<java.lang.Double>) defaultValue(fields()[16]);
                record.ToolCurrent = fieldSetFlags()[17] ? this.ToolCurrent : (java.lang.Double) defaultValue(fields()[17]);
                record.ToolTemperature = fieldSetFlags()[18] ? this.ToolTemperature : (java.lang.Double) defaultValue(fields()[18]);
                record.TCPForce = fieldSetFlags()[19] ? this.TCPForce : (java.lang.Double) defaultValue(fields()[19]);
                record.AnomalyState = fieldSetFlags()[20] ? this.AnomalyState : (java.lang.Integer) defaultValue(fields()[20]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<RobotData>
            WRITER$ = (org.apache.avro.io.DatumWriter<RobotData>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<RobotData>
            READER$ = (org.apache.avro.io.DatumReader<RobotData>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override protected boolean hasCustomCoders() { return true; }

    @Override public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException
    {
        out.writeInt(this.ID);

        out.writeDouble(this.Timestamp);

        long size0 = this.ActualJointPositions.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (java.lang.Double e0: this.ActualJointPositions) {
            actualSize0++;
            out.startItem();
            out.writeDouble(e0);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

        long size1 = this.ActualJointVelocities.size();
        out.writeArrayStart();
        out.setItemCount(size1);
        long actualSize1 = 0;
        for (java.lang.Double e1: this.ActualJointVelocities) {
            actualSize1++;
            out.startItem();
            out.writeDouble(e1);
        }
        out.writeArrayEnd();
        if (actualSize1 != size1)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

        long size2 = this.ActualJointCurrents.size();
        out.writeArrayStart();
        out.setItemCount(size2);
        long actualSize2 = 0;
        for (java.lang.Double e2: this.ActualJointCurrents) {
            actualSize2++;
            out.startItem();
            out.writeDouble(e2);
        }
        out.writeArrayEnd();
        if (actualSize2 != size2)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

        long size3 = this.ActualCartesianCoordinates.size();
        out.writeArrayStart();
        out.setItemCount(size3);
        long actualSize3 = 0;
        for (java.lang.Double e3: this.ActualCartesianCoordinates) {
            actualSize3++;
            out.startItem();
            out.writeDouble(e3);
        }
        out.writeArrayEnd();
        if (actualSize3 != size3)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

        long size4 = this.ActualToolSpeed.size();
        out.writeArrayStart();
        out.setItemCount(size4);
        long actualSize4 = 0;
        for (java.lang.Double e4: this.ActualToolSpeed) {
            actualSize4++;
            out.startItem();
            out.writeDouble(e4);
        }
        out.writeArrayEnd();
        if (actualSize4 != size4)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

        long size5 = this.GeneralizedForces.size();
        out.writeArrayStart();
        out.setItemCount(size5);
        long actualSize5 = 0;
        for (java.lang.Double e5: this.GeneralizedForces) {
            actualSize5++;
            out.startItem();
            out.writeDouble(e5);
        }
        out.writeArrayEnd();
        if (actualSize5 != size5)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");

        long size6 = this.TemperatureOfEachJoint.size();
        out.writeArrayStart();
        out.setItemCount(size6);
        long actualSize6 = 0;
        for (java.lang.Double e6: this.TemperatureOfEachJoint) {
            actualSize6++;
            out.startItem();
            out.writeDouble(e6);
        }
        out.writeArrayEnd();
        if (actualSize6 != size6)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");

        out.writeDouble(this.ExecutionTime);

        out.writeInt(this.SafetyStatus);

        long size7 = this.ToolAcceleration.size();
        out.writeArrayStart();
        out.setItemCount(size7);
        long actualSize7 = 0;
        for (java.lang.Double e7: this.ToolAcceleration) {
            actualSize7++;
            out.startItem();
            out.writeDouble(e7);
        }
        out.writeArrayEnd();
        if (actualSize7 != size7)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size7 + ", but element count was " + actualSize7 + ".");

        out.writeDouble(this.NormOfCartesianLinearMomentum);

        out.writeDouble(this.RobotCurrent);

        long size8 = this.JointVoltages.size();
        out.writeArrayStart();
        out.setItemCount(size8);
        long actualSize8 = 0;
        for (java.lang.Double e8: this.JointVoltages) {
            actualSize8++;
            out.startItem();
            out.writeDouble(e8);
        }
        out.writeArrayEnd();
        if (actualSize8 != size8)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size8 + ", but element count was " + actualSize8 + ".");

        long size9 = this.ElbowPosition.size();
        out.writeArrayStart();
        out.setItemCount(size9);
        long actualSize9 = 0;
        for (java.lang.Double e9: this.ElbowPosition) {
            actualSize9++;
            out.startItem();
            out.writeDouble(e9);
        }
        out.writeArrayEnd();
        if (actualSize9 != size9)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size9 + ", but element count was " + actualSize9 + ".");

        long size10 = this.ElbowVelocity.size();
        out.writeArrayStart();
        out.setItemCount(size10);
        long actualSize10 = 0;
        for (java.lang.Double e10: this.ElbowVelocity) {
            actualSize10++;
            out.startItem();
            out.writeDouble(e10);
        }
        out.writeArrayEnd();
        if (actualSize10 != size10)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size10 + ", but element count was " + actualSize10 + ".");

        out.writeDouble(this.ToolCurrent);

        out.writeDouble(this.ToolTemperature);

        out.writeDouble(this.TCPForce);

        out.writeInt(this.AnomalyState);

    }

    @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException
    {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.ID = in.readInt();

            this.Timestamp = in.readDouble();

            long size0 = in.readArrayStart();
            java.util.List<java.lang.Double> a0 = this.ActualJointPositions;
            if (a0 == null) {
                a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("ActualJointPositions").schema());
                this.ActualJointPositions = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
                for ( ; size0 != 0; size0--) {
                    java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
                    e0 = in.readDouble();
                    a0.add(e0);
                }
            }

            long size1 = in.readArrayStart();
            java.util.List<java.lang.Double> a1 = this.ActualJointVelocities;
            if (a1 == null) {
                a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("ActualJointVelocities").schema());
                this.ActualJointVelocities = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
                for ( ; size1 != 0; size1--) {
                    java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
                    e1 = in.readDouble();
                    a1.add(e1);
                }
            }

            long size2 = in.readArrayStart();
            java.util.List<java.lang.Double> a2 = this.ActualJointCurrents;
            if (a2 == null) {
                a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("ActualJointCurrents").schema());
                this.ActualJointCurrents = a2;
            } else a2.clear();
            SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
                for ( ; size2 != 0; size2--) {
                    java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
                    e2 = in.readDouble();
                    a2.add(e2);
                }
            }

            long size3 = in.readArrayStart();
            java.util.List<java.lang.Double> a3 = this.ActualCartesianCoordinates;
            if (a3 == null) {
                a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("ActualCartesianCoordinates").schema());
                this.ActualCartesianCoordinates = a3;
            } else a3.clear();
            SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
                for ( ; size3 != 0; size3--) {
                    java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
                    e3 = in.readDouble();
                    a3.add(e3);
                }
            }

            long size4 = in.readArrayStart();
            java.util.List<java.lang.Double> a4 = this.ActualToolSpeed;
            if (a4 == null) {
                a4 = new SpecificData.Array<java.lang.Double>((int)size4, SCHEMA$.getField("ActualToolSpeed").schema());
                this.ActualToolSpeed = a4;
            } else a4.clear();
            SpecificData.Array<java.lang.Double> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a4 : null);
            for ( ; 0 < size4; size4 = in.arrayNext()) {
                for ( ; size4 != 0; size4--) {
                    java.lang.Double e4 = (ga4 != null ? ga4.peek() : null);
                    e4 = in.readDouble();
                    a4.add(e4);
                }
            }

            long size5 = in.readArrayStart();
            java.util.List<java.lang.Double> a5 = this.GeneralizedForces;
            if (a5 == null) {
                a5 = new SpecificData.Array<java.lang.Double>((int)size5, SCHEMA$.getField("GeneralizedForces").schema());
                this.GeneralizedForces = a5;
            } else a5.clear();
            SpecificData.Array<java.lang.Double> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a5 : null);
            for ( ; 0 < size5; size5 = in.arrayNext()) {
                for ( ; size5 != 0; size5--) {
                    java.lang.Double e5 = (ga5 != null ? ga5.peek() : null);
                    e5 = in.readDouble();
                    a5.add(e5);
                }
            }

            long size6 = in.readArrayStart();
            java.util.List<java.lang.Double> a6 = this.TemperatureOfEachJoint;
            if (a6 == null) {
                a6 = new SpecificData.Array<java.lang.Double>((int)size6, SCHEMA$.getField("TemperatureOfEachJoint").schema());
                this.TemperatureOfEachJoint = a6;
            } else a6.clear();
            SpecificData.Array<java.lang.Double> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a6 : null);
            for ( ; 0 < size6; size6 = in.arrayNext()) {
                for ( ; size6 != 0; size6--) {
                    java.lang.Double e6 = (ga6 != null ? ga6.peek() : null);
                    e6 = in.readDouble();
                    a6.add(e6);
                }
            }

            this.ExecutionTime = in.readDouble();

            this.SafetyStatus = in.readInt();

            long size7 = in.readArrayStart();
            java.util.List<java.lang.Double> a7 = this.ToolAcceleration;
            if (a7 == null) {
                a7 = new SpecificData.Array<java.lang.Double>((int)size7, SCHEMA$.getField("ToolAcceleration").schema());
                this.ToolAcceleration = a7;
            } else a7.clear();
            SpecificData.Array<java.lang.Double> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a7 : null);
            for ( ; 0 < size7; size7 = in.arrayNext()) {
                for ( ; size7 != 0; size7--) {
                    java.lang.Double e7 = (ga7 != null ? ga7.peek() : null);
                    e7 = in.readDouble();
                    a7.add(e7);
                }
            }

            this.NormOfCartesianLinearMomentum = in.readDouble();

            this.RobotCurrent = in.readDouble();

            long size8 = in.readArrayStart();
            java.util.List<java.lang.Double> a8 = this.JointVoltages;
            if (a8 == null) {
                a8 = new SpecificData.Array<java.lang.Double>((int)size8, SCHEMA$.getField("JointVoltages").schema());
                this.JointVoltages = a8;
            } else a8.clear();
            SpecificData.Array<java.lang.Double> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a8 : null);
            for ( ; 0 < size8; size8 = in.arrayNext()) {
                for ( ; size8 != 0; size8--) {
                    java.lang.Double e8 = (ga8 != null ? ga8.peek() : null);
                    e8 = in.readDouble();
                    a8.add(e8);
                }
            }

            long size9 = in.readArrayStart();
            java.util.List<java.lang.Double> a9 = this.ElbowPosition;
            if (a9 == null) {
                a9 = new SpecificData.Array<java.lang.Double>((int)size9, SCHEMA$.getField("ElbowPosition").schema());
                this.ElbowPosition = a9;
            } else a9.clear();
            SpecificData.Array<java.lang.Double> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a9 : null);
            for ( ; 0 < size9; size9 = in.arrayNext()) {
                for ( ; size9 != 0; size9--) {
                    java.lang.Double e9 = (ga9 != null ? ga9.peek() : null);
                    e9 = in.readDouble();
                    a9.add(e9);
                }
            }

            long size10 = in.readArrayStart();
            java.util.List<java.lang.Double> a10 = this.ElbowVelocity;
            if (a10 == null) {
                a10 = new SpecificData.Array<java.lang.Double>((int)size10, SCHEMA$.getField("ElbowVelocity").schema());
                this.ElbowVelocity = a10;
            } else a10.clear();
            SpecificData.Array<java.lang.Double> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a10 : null);
            for ( ; 0 < size10; size10 = in.arrayNext()) {
                for ( ; size10 != 0; size10--) {
                    java.lang.Double e10 = (ga10 != null ? ga10.peek() : null);
                    e10 = in.readDouble();
                    a10.add(e10);
                }
            }

            this.ToolCurrent = in.readDouble();

            this.ToolTemperature = in.readDouble();

            this.TCPForce = in.readDouble();

            this.AnomalyState = in.readInt();

        } else {
            for (int i = 0; i < 21; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.ID = in.readInt();
                        break;

                    case 1:
                        this.Timestamp = in.readDouble();
                        break;

                    case 2:
                        long size0 = in.readArrayStart();
                        java.util.List<java.lang.Double> a0 = this.ActualJointPositions;
                        if (a0 == null) {
                            a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("ActualJointPositions").schema());
                            this.ActualJointPositions = a0;
                        } else a0.clear();
                        SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
                        for ( ; 0 < size0; size0 = in.arrayNext()) {
                            for ( ; size0 != 0; size0--) {
                                java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
                                e0 = in.readDouble();
                                a0.add(e0);
                            }
                        }
                        break;

                    case 3:
                        long size1 = in.readArrayStart();
                        java.util.List<java.lang.Double> a1 = this.ActualJointVelocities;
                        if (a1 == null) {
                            a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("ActualJointVelocities").schema());
                            this.ActualJointVelocities = a1;
                        } else a1.clear();
                        SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
                        for ( ; 0 < size1; size1 = in.arrayNext()) {
                            for ( ; size1 != 0; size1--) {
                                java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
                                e1 = in.readDouble();
                                a1.add(e1);
                            }
                        }
                        break;

                    case 4:
                        long size2 = in.readArrayStart();
                        java.util.List<java.lang.Double> a2 = this.ActualJointCurrents;
                        if (a2 == null) {
                            a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("ActualJointCurrents").schema());
                            this.ActualJointCurrents = a2;
                        } else a2.clear();
                        SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
                        for ( ; 0 < size2; size2 = in.arrayNext()) {
                            for ( ; size2 != 0; size2--) {
                                java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
                                e2 = in.readDouble();
                                a2.add(e2);
                            }
                        }
                        break;

                    case 5:
                        long size3 = in.readArrayStart();
                        java.util.List<java.lang.Double> a3 = this.ActualCartesianCoordinates;
                        if (a3 == null) {
                            a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("ActualCartesianCoordinates").schema());
                            this.ActualCartesianCoordinates = a3;
                        } else a3.clear();
                        SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
                        for ( ; 0 < size3; size3 = in.arrayNext()) {
                            for ( ; size3 != 0; size3--) {
                                java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
                                e3 = in.readDouble();
                                a3.add(e3);
                            }
                        }
                        break;

                    case 6:
                        long size4 = in.readArrayStart();
                        java.util.List<java.lang.Double> a4 = this.ActualToolSpeed;
                        if (a4 == null) {
                            a4 = new SpecificData.Array<java.lang.Double>((int)size4, SCHEMA$.getField("ActualToolSpeed").schema());
                            this.ActualToolSpeed = a4;
                        } else a4.clear();
                        SpecificData.Array<java.lang.Double> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a4 : null);
                        for ( ; 0 < size4; size4 = in.arrayNext()) {
                            for ( ; size4 != 0; size4--) {
                                java.lang.Double e4 = (ga4 != null ? ga4.peek() : null);
                                e4 = in.readDouble();
                                a4.add(e4);
                            }
                        }
                        break;

                    case 7:
                        long size5 = in.readArrayStart();
                        java.util.List<java.lang.Double> a5 = this.GeneralizedForces;
                        if (a5 == null) {
                            a5 = new SpecificData.Array<java.lang.Double>((int)size5, SCHEMA$.getField("GeneralizedForces").schema());
                            this.GeneralizedForces = a5;
                        } else a5.clear();
                        SpecificData.Array<java.lang.Double> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a5 : null);
                        for ( ; 0 < size5; size5 = in.arrayNext()) {
                            for ( ; size5 != 0; size5--) {
                                java.lang.Double e5 = (ga5 != null ? ga5.peek() : null);
                                e5 = in.readDouble();
                                a5.add(e5);
                            }
                        }
                        break;

                    case 8:
                        long size6 = in.readArrayStart();
                        java.util.List<java.lang.Double> a6 = this.TemperatureOfEachJoint;
                        if (a6 == null) {
                            a6 = new SpecificData.Array<java.lang.Double>((int)size6, SCHEMA$.getField("TemperatureOfEachJoint").schema());
                            this.TemperatureOfEachJoint = a6;
                        } else a6.clear();
                        SpecificData.Array<java.lang.Double> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a6 : null);
                        for ( ; 0 < size6; size6 = in.arrayNext()) {
                            for ( ; size6 != 0; size6--) {
                                java.lang.Double e6 = (ga6 != null ? ga6.peek() : null);
                                e6 = in.readDouble();
                                a6.add(e6);
                            }
                        }
                        break;

                    case 9:
                        this.ExecutionTime = in.readDouble();
                        break;

                    case 10:
                        this.SafetyStatus = in.readInt();
                        break;

                    case 11:
                        long size7 = in.readArrayStart();
                        java.util.List<java.lang.Double> a7 = this.ToolAcceleration;
                        if (a7 == null) {
                            a7 = new SpecificData.Array<java.lang.Double>((int)size7, SCHEMA$.getField("ToolAcceleration").schema());
                            this.ToolAcceleration = a7;
                        } else a7.clear();
                        SpecificData.Array<java.lang.Double> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a7 : null);
                        for ( ; 0 < size7; size7 = in.arrayNext()) {
                            for ( ; size7 != 0; size7--) {
                                java.lang.Double e7 = (ga7 != null ? ga7.peek() : null);
                                e7 = in.readDouble();
                                a7.add(e7);
                            }
                        }
                        break;

                    case 12:
                        this.NormOfCartesianLinearMomentum = in.readDouble();
                        break;

                    case 13:
                        this.RobotCurrent = in.readDouble();
                        break;

                    case 14:
                        long size8 = in.readArrayStart();
                        java.util.List<java.lang.Double> a8 = this.JointVoltages;
                        if (a8 == null) {
                            a8 = new SpecificData.Array<java.lang.Double>((int)size8, SCHEMA$.getField("JointVoltages").schema());
                            this.JointVoltages = a8;
                        } else a8.clear();
                        SpecificData.Array<java.lang.Double> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a8 : null);
                        for ( ; 0 < size8; size8 = in.arrayNext()) {
                            for ( ; size8 != 0; size8--) {
                                java.lang.Double e8 = (ga8 != null ? ga8.peek() : null);
                                e8 = in.readDouble();
                                a8.add(e8);
                            }
                        }
                        break;

                    case 15:
                        long size9 = in.readArrayStart();
                        java.util.List<java.lang.Double> a9 = this.ElbowPosition;
                        if (a9 == null) {
                            a9 = new SpecificData.Array<java.lang.Double>((int)size9, SCHEMA$.getField("ElbowPosition").schema());
                            this.ElbowPosition = a9;
                        } else a9.clear();
                        SpecificData.Array<java.lang.Double> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a9 : null);
                        for ( ; 0 < size9; size9 = in.arrayNext()) {
                            for ( ; size9 != 0; size9--) {
                                java.lang.Double e9 = (ga9 != null ? ga9.peek() : null);
                                e9 = in.readDouble();
                                a9.add(e9);
                            }
                        }
                        break;

                    case 16:
                        long size10 = in.readArrayStart();
                        java.util.List<java.lang.Double> a10 = this.ElbowVelocity;
                        if (a10 == null) {
                            a10 = new SpecificData.Array<java.lang.Double>((int)size10, SCHEMA$.getField("ElbowVelocity").schema());
                            this.ElbowVelocity = a10;
                        } else a10.clear();
                        SpecificData.Array<java.lang.Double> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a10 : null);
                        for ( ; 0 < size10; size10 = in.arrayNext()) {
                            for ( ; size10 != 0; size10--) {
                                java.lang.Double e10 = (ga10 != null ? ga10.peek() : null);
                                e10 = in.readDouble();
                                a10.add(e10);
                            }
                        }
                        break;

                    case 17:
                        this.ToolCurrent = in.readDouble();
                        break;

                    case 18:
                        this.ToolTemperature = in.readDouble();
                        break;

                    case 19:
                        this.TCPForce = in.readDouble();
                        break;

                    case 20:
                        this.AnomalyState = in.readInt();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










